/* class Solution {
public:
    bool isValid(string s) {
        
        // Need to iterate through the string character by character and determine if the next character is a correct closing character, then remove those from it.
        stack<char> brackets;

        for (char c : s) {
        if (c == '(' || c == '{' || c == '[') {
            // If an opening bracket is encountered, push it onto the stack.
            brackets.push(c);
        } else {
            // If a closing bracket is encountered, check if it matches the top of the stack.
            if (brackets.empty()) {
                return false; // No matching opening bracket found.
            }
            
            char top = brackets.top();
            brackets.pop();
            
            // Check if the closing bracket matches the corresponding opening bracket.
            if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {
                return false; // Mismatched brackets.
            }
        }
        //return true;
    }
    
    // If the stack is empty at the end, all brackets are matched correctly.
    return brackets.empty();




    }
};*/




class Solution {
public:
    bool isValid(string s) {
        
        // Need to iterate through the string character by character and determine if the next character is a correct closing character, then remove those from it.
        stack<char> brackets;

        for (char c : s) {
        if (c == '(' || c == '{' || c == '[') {
            // If an opening bracket is encountered, push it onto the stack.
            brackets.push(c);
        } else {
            // If a closing bracket is encountered, check if it matches the top of the stack.
            if (brackets.empty()) {
                return false; // No matching opening bracket found.
            }
            
            char top = brackets.top();
            brackets.pop();
            
            // Check if the closing bracket matches the corresponding opening bracket.
            if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {
                return false; // Mismatched brackets.
            }
        }
        //return true;
    }
    
    // If the stack is empty at the end, all brackets are matched correctly.
    return brackets.empty();




    }
};
